// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "guard_rails/model"
)

// RepositoryDb is an autogenerated mock type for the RepositoryDb type
type RepositoryDb struct {
	mock.Mock
}

// AddRepository provides a mock function with given fields: ctx, repository
func (_m *RepositoryDb) AddRepository(ctx context.Context, repository *model.Repository) error {
	ret := _m.Called(ctx, repository)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Repository) error); ok {
		r0 = rf(ctx, repository)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRepository provides a mock function with given fields: ctx, repositoryName
func (_m *RepositoryDb) DeleteRepository(ctx context.Context, repositoryName string) (int64, error) {
	ret := _m.Called(ctx, repositoryName)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, repositoryName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, repositoryName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepositoryById provides a mock function with given fields: repositoryId
func (_m *RepositoryDb) GetRepositoryById(repositoryId int64) (*model.Repository, error) {
	ret := _m.Called(repositoryId)

	var r0 *model.Repository
	if rf, ok := ret.Get(0).(func(int64) *model.Repository); ok {
		r0 = rf(repositoryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(repositoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepositoryByName provides a mock function with given fields: ctx, repositoryName
func (_m *RepositoryDb) GetRepositoryByName(ctx context.Context, repositoryName string) (*model.Repository, error) {
	ret := _m.Called(ctx, repositoryName)

	var r0 *model.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Repository); ok {
		r0 = rf(ctx, repositoryName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, repositoryName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRepository provides a mock function with given fields: ctx, repository
func (_m *RepositoryDb) UpdateRepository(ctx context.Context, repository *model.Repository) (int64, error) {
	ret := _m.Called(ctx, repository)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *model.Repository) int64); ok {
		r0 = rf(ctx, repository)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Repository) error); ok {
		r1 = rf(ctx, repository)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepositoryDb interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryDb creates a new instance of RepositoryDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryDb(t mockConstructorTestingTNewRepositoryDb) *RepositoryDb {
	mock := &RepositoryDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
