// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	client "guard_rails/client"

	mock "github.com/stretchr/testify/mock"

	model "guard_rails/model"
)

// GitClient is an autogenerated mock type for the GitClient type
type GitClient struct {
	mock.Mock
}

// Clone provides a mock function with given fields: repository
func (_m *GitClient) Clone(repository *model.Repository) error {
	ret := _m.Called(repository)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Repository) error); ok {
		r0 = rf(repository)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNextFile provides a mock function with given fields:
func (_m *GitClient) GetNextFile() (client.File, error) {
	ret := _m.Called()

	var r0 client.File
	if rf, ok := ret.Get(0).(func() client.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGitClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewGitClient creates a new instance of GitClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGitClient(t mockConstructorTestingTNewGitClient) *GitClient {
	mock := &GitClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
